//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PLN.APSWebReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyValue", Namespace="http://schemas.datacontract.org/2004/07/Mozart.Deployment.JobScheduler")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PLN.APSWebReference.KeyValue[]))]
    public partial struct KeyValue : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="APSWebReference.ITriggerJobService")]
    public interface ITriggerJobService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/Fire", ReplyAction="http://tempuri.org/ITriggerJobService/FireResponse")]
        void Fire(string triggerName, string password, int delaySec, bool makeDisable, PLN.APSWebReference.KeyValue[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/FireUser", ReplyAction="http://tempuri.org/ITriggerJobService/FireUserResponse")]
        void FireUser(string triggerName, string userID, string password, int delaySec, bool makeDisable, PLN.APSWebReference.KeyValue[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/IsCurrentlyExecuting", ReplyAction="http://tempuri.org/ITriggerJobService/IsCurrentlyExecutingResponse")]
        bool IsCurrentlyExecuting(string triggerName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/IsCurrentlyExecutingUser", ReplyAction="http://tempuri.org/ITriggerJobService/IsCurrentlyExecutingUserResponse")]
        bool IsCurrentlyExecutingUser(string triggerName, string userID, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/Interrupt", ReplyAction="http://tempuri.org/ITriggerJobService/InterruptResponse")]
        void Interrupt(string triggerName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/InterruptUser", ReplyAction="http://tempuri.org/ITriggerJobService/InterruptUserResponse")]
        void InterruptUser(string triggerName, string userID, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/Pause", ReplyAction="http://tempuri.org/ITriggerJobService/PauseResponse")]
        void Pause(string triggerName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/PauseUser", ReplyAction="http://tempuri.org/ITriggerJobService/PauseUserResponse")]
        void PauseUser(string triggerName, string userID, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITriggerJobServiceChannel : PLN.APSWebReference.ITriggerJobService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TriggerJobServiceClient : System.ServiceModel.ClientBase<PLN.APSWebReference.ITriggerJobService>, PLN.APSWebReference.ITriggerJobService {
        
        public TriggerJobServiceClient() {
        }
        
        public TriggerJobServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TriggerJobServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TriggerJobServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TriggerJobServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Fire(string triggerName, string password, int delaySec, bool makeDisable, PLN.APSWebReference.KeyValue[] args) {
            base.Channel.Fire(triggerName, password, delaySec, makeDisable, args);
        }
        
        public void FireUser(string triggerName, string userID, string password, int delaySec, bool makeDisable, PLN.APSWebReference.KeyValue[] args) {
            base.Channel.FireUser(triggerName, userID, password, delaySec, makeDisable, args);
        }
        
        public bool IsCurrentlyExecuting(string triggerName, string password) {
            return base.Channel.IsCurrentlyExecuting(triggerName, password);
        }
        
        public bool IsCurrentlyExecutingUser(string triggerName, string userID, string password) {
            return base.Channel.IsCurrentlyExecutingUser(triggerName, userID, password);
        }
        
        public void Interrupt(string triggerName, string password) {
            base.Channel.Interrupt(triggerName, password);
        }
        
        public void InterruptUser(string triggerName, string userID, string password) {
            base.Channel.InterruptUser(triggerName, userID, password);
        }
        
        public void Pause(string triggerName, string password) {
            base.Channel.Pause(triggerName, password);
        }
        
        public void PauseUser(string triggerName, string userID, string password) {
            base.Channel.PauseUser(triggerName, userID, password);
        }
    }
}
